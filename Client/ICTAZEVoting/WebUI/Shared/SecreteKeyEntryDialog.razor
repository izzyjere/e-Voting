<MudDialog>
    <DialogContent>
        <MudForm>
           <MudTextField InputType="@(showKey?InputType.Text:InputType.Password)" @bind-Value="@model" FullWidth="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Lock" Variant="Variant.Outlined" Label="Secrete Key"/>
        </MudForm>
        <MudCheckBox @bind-Checked="showKey"  Size="Size.Small" Class="mt-3" T="bool" Label="Show secrete key"/>
        @if(isLoading)
        {
            <MudProgressLinear Class="mt-2" Color="Color.Warning" Indeterminate="true"/>
        }
    </DialogContent>
    <DialogActions>       
        <MudButton OnClick="()=>Dialog.Cancel()" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error">Cancel</MudButton>
        <MudButton OnClick="Submit" StartIcon="@Icons.Material.Filled.LockOpen" Color="Color.Success">Vote</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; }
    ClaimsPrincipal claimsPrincipal = new();
    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = await authenticationService.CurrentUser();
    }
    string model; bool showKey;
    bool isLoading;
    InputType inputType = InputType.Password;
    void Cancel() => Dialog.Cancel();
    async void Submit()
    {    
        if (string.IsNullOrEmpty(model))
        {
            snackBar.Add("Enter your key before continuing.", Severity.Error);
            return;
        }
        else
        {
            isLoading = true;
            StateHasChanged();
            var request = new VoterVerificationRequest { Key=model, UserId = claimsPrincipal.GetUserId() };
            var result = await voterService.VerifyVoter(request);
            if(result.Succeeded)
            {
                snackBar.Add("Voter verification complete",Severity.Success);
                Dialog.Close();
            }
            else
            {
                snackBar.Add("Verification failed. Check your key.",Severity.Error);
                return;
            }
            isLoading = false;

        }
    }
    void OnShowKey(bool show)
    {
        InputType inputType = show?InputType.Text:InputType.Password;
        StateHasChanged();
    }
}
