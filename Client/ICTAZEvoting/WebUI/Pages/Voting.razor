@layout BallotLayout
@page "/voting"
@page "/voting/{electionId}"

@using ICTAZEVoting.Shared
@using System.Linq
@using System
@using ICTAZEVoting.Shared.Models
@using ICTAZEVoting.Shared.Responses.Domain
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime

<MudGrid>
    <MudItem xs="12">
        <h1>Ballot</h1>
    </MudItem>
    <MudItem xs="12">
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Presidential">
                <MudGrid>
                    <MudItem xs="12" sm="6" md="4">
                        <Animate Animation="Animations.FadeDownRight" Duration="TimeSpan.FromSeconds(1)">
                            <div >
                                <MudCard Elevation="25" Outlined="true">
                                    <MudCardHeader>
                                        <CardHeaderAvatar>
                                            <MudAvatar Color="Color.Secondary">CS</MudAvatar>
                                        </CardHeaderAvatar>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.body1">Clarence Simukanzye</MudText>
                                            @*<MudText Typo="Typo.body2">Peninsula in Europe</MudText>*@
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            @*<MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />*@
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardMedia Image="images/clarence.png" Height="300" />
                                    <MudCardContent>
                                        <MudText Typo="Typo.body2">Knowldge drives innovation, innovation drives productivity and productivity drives economic growth.</MudText>
                                    </MudCardContent>                                    
                                </MudCard>
                            </div>
                        </Animate>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            <MudTabPanel Text="Parliamentary">
               
            </MudTabPanel>
            <MudTabPanel Text="Tab Three">
                <MudText>Content Three</MudText>
            </MudTabPanel>
            <MudTabPanel Text="Tab Disabled" Disabled="true">
                <MudText>Content Disabled</MudText>
            </MudTabPanel>
            <MudToolBar Class="align-items: center;">
                <MudButton Class="align-items: center;" Disabled="@_processing" OnClick="ProcessSomething" Variant="Variant.Filled" Color="Color.Success">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>SUBMIT</MudText>
                    }
                </MudButton>
            </MudToolBar>
        </MudTabs>
    </MudItem>
</MudGrid>





@code {

    [Parameter] public string ElectionId { get; set; }
    private List<CandidateResponse> candidates = new List<CandidateResponse>();
    ElectionResponse Election = new();
    protected override async Task OnInitializedAsync()
    {
        
    }
    
    List<CandidateResponse> GetCandidates(string electionId)
    {
        return candidates.Where(c => c.Position.ElectionId.ToString() == electionId).ToList();
    }
    private bool _processing = false;

    async Task ProcessSomething()
    {
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
    }



}
