@page "/voters"
@using ICTAZEVoting.Shared
@using System.Linq
@using System
@using ICTAZEVoting.Shared.Models
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime
@using ICTAZEVoting.WebUI.WebCam
@using System.Net.Http
@using System.IO

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit voters</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                    <MudTextField @bind-Value="voter.VoterNumber" Label="Voter Number" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                    <MudTextField @bind-Value="voter.PersonalDetails.NRC" Label="NRC Number" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                    <MudDatePicker @bind-Date="voter.PersonalDetails.DateOfBirth" Label="Date of Birth" Editable="true" Placeholder="Select Date" Variant="Variant.Outlined" Style="width:100%" />
                </Animate>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                    <MudTextField @bind-Value="voter.PersonalDetails.FirstName" Label="First Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                    <MudTextField @bind-Value="voter.PersonalDetails.PhoneNumber" Label="Phone" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                    <MudTextField @bind-Value="voter.PersonalDetails.Email" Label="Email Address" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                </Animate>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                    <MudTextField @bind-Value="voter.PersonalDetails.MiddleName" Label="Middle Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                    <MudSelect T="Gender" @bind-Value="voter.PersonalDetails.Gender" Label="Gender" Variant="Variant.Outlined" Margin="Margin.Normal">
                        @foreach (var item in Enum.GetValues<Gender>())
                        {
                            <MudSelectItem T="Gender" Value="@item">
                                @item.ToString()
                            </MudSelectItem>
                        }
                    </MudSelect>
                </Animate>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                    <MudTextField @bind-Value="voter.PersonalDetails.LastName" Label="Last Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                    @*<MudTextField @bind-Value="voter.PersonalDetails.PictureUrl" Label="Passport Size Photo" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>*@
                </Animate>
            </MudItem>
        </MudGrid>

        <MudButton id="capture-btn" Disabled="@dis"  @onclick="CaptureFrame" Variant="Variant.Filled" Color="Color.Info">Capture Passport Size Photo</MudButton>
        @if (!string.IsNullOrEmpty(frameUri))
        {
            <img src="@frameUri" />
        }
        <br /><br />
        <video id="videoFeed" width="320" height="240" />
        <canvas class="d-none" id="currentFrame" width="320" height="240" /><br />
        <br /><br />
        <MudButton Variant="Variant.Filled" Color="Color.Info">Save voter</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Style="color: white" Elevation="25" Items="voters">
    <ToolBarContent>
        <MudText Typo="Typo.h4">Voters</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Categories..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Voter</MudTh>
        <MudTh>NRC No.</MudTh>
        <MudTh>Gender</MudTh>
        <MudTh>Poling Station</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="voter Number">@context.VoterNumber</MudTd>

        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>

<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Filled.ArrowCircleUp" />
</MudScrollToTop>
<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private string frameUri;
    private string searchString = "";
    bool dis = true;
    private Voter voter = new Voter();
    private List<Voter> voters = new List<Voter>();
    protected override async Task OnInitializedAsync()
    {
        voter.PersonalDetails = new PersonalDetails();
        await StartVideFrame();
    }

    private void Update(Voter voter)
    {
        Update(voter);
        voter = new Voter();
        snackBar.Add("Voter Saved.", Severity.Success);
    }
    private void Edit(Guid id)
    {
        voter = voters.FirstOrDefault(c => c.Id == id);
    }

    MudMessageBox mbox { get; set; }
    private async Task Delete(Guid id)
    {
        bool? confirmed = await mbox.Show();
        if (confirmed == true)
        {
            await Delete(id);
            snackBar.Add("Loan Deleted.", Severity.Success);
        }
    }

    private async Task StartVideFrame()
    {
        await JsRuntime.InvokeVoidAsync("startVideo", "videoFeed");       
        dis = false;
        StateHasChanged();
    }
    private async Task CaptureFrame()
    {
         await JsRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));    
    }


    [JSInvokable]
    public void ProcessImage(string imageString)
    {
        byte[] imageData = Convert.FromBase64String(imageString.Split(',')[1]);
        var fileName = httpClient.PostAsJsonAsync(ApiEndpoints.PictureUpload, new UploadRequest { Data = imageData });
       
    }

}

