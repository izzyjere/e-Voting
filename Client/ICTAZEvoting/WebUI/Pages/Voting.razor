@layout BallotLayout
@page "/voting"
@page "/voting/{electionId}"

@using ICTAZEVoting.Shared
@using System.Linq
@using System
@using ICTAZEVoting.Shared.Models
@using ICTAZEVoting.Shared.Responses
@using ICTAZEVoting.Shared.Responses.Domain
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime

<MudGrid>
    <MudItem xs="12">
        <h1>Ballot</h1>
    </MudItem>
    <MudItem xs="12">
        <MudTabs @ref="tabs" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            @foreach (var position in election.Positions.OrderByDescending(p => p.CandidateCount))
            {
                <MudTabPanel Disabled="@(position!=election.Positions.First()||!HasCandidates(position.Id))" Text="@position.Position.ToUpper()">
                    <MudGrid>
                        @if (!candidates.Any(c => c.ElectionPositionId == position.Id))
                        {
                            <MudAlert Severity="Severity.Info" AlertTextPosition="AlertTextPosition.Center"> No one is stating in for this posistion</MudAlert>
                        }
                        @foreach (var candidate in candidates.Where(c => c.ElectionPositionId == position.Id))
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <Animate Animation="Animations.FadeDownRight" Duration="TimeSpan.FromSeconds(1)">
                                    <div @onclick="()=>{if(candidate.IsSelected){return;}candidate.IsSelected=CandidateClicked(candidate,position); StateHasChanged();}" class='@(candidate.IsSelected?"selected":"")'>
                                        <MudCard Elevation="25" Outlined="true">
                                            <MudCardHeader>
                                                <CardHeaderAvatar>
                                                    <MudAvatar Color="Color.Secondary">@candidate.PersonalDetails.FirstName.First() @candidate.PersonalDetails.LastName.First() </MudAvatar>
                                                </CardHeaderAvatar>
                                                <CardHeaderContent>
                                                    <MudText Typo="Typo.h6">@candidate.PersonalDetails.FullName</MudText>
                                                    <MudText Typo="Typo.body2">@candidate.PoliticalParty.Name</MudText>
                                                </CardHeaderContent>
                                            </MudCardHeader>
                                            <MudCardMedia Image="@(fileService.GetFileUrl(candidate.PersonalDetails.PictureUrl))" Height="300" />
                                            <MudCardContent>
                                                <MudText Typo="Typo.body2">@candidate.PoliticalParty.Slogan</MudText>
                                            </MudCardContent>
                                        </MudCard>
                                    </div>
                                </Animate>
                            </MudItem>
                        }
                    </MudGrid>
                </MudTabPanel>
            }

            <MudToolBar Class="align-items: center;">
                @if (tabs.ActivePanelIndex != 0)
                {
                    <MudButton OnClick="()=>{ tabs.ActivatePanel(tabs.Panels[tabs.ActivePanelIndex-1]);}" Class="align-items: center;" Variant="Variant.Filled" Color="Color.Primary">
                        <MudText>Previous</MudText>
                    </MudButton>
                    <MudSpacer />
                }
                <MudButton Class="align-items: center;" Disabled="@_processing" OnClick="()=>ProcessSomething(tabs.ActivePanelIndex)" Variant="Variant.Filled" Color="Color.Success">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Color="Color.Secondary" Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>@buttonText</MudText>
                    }
                </MudButton>
            </MudToolBar>
        </MudTabs>
    </MudItem>
</MudGrid>

<style>
    .selected {
        border-width: 6px;
        border-style: solid;
        border-color: lawngreen;
    }
</style>



@code {

    [Parameter] public string ElectionId { get; set; }
    private List<CandidateResponse> candidates = new List<CandidateResponse>();
    ElectionResponse election = new();
    MudTabs tabs;
    Ballot ballot;
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }
    bool HasCandidates(Guid id)
    {
        return candidates.Any(c => c.ElectionPositionId == id);
    }
    async Task Refresh()
    {
        ballot = new();
        ballot.Votes = new();
        election.Positions = new();
        election = await electionService.GetElection(ElectionId);
        candidates = await electionService.GetCandidates(ElectionId);
        if (election.Positions.Count == 1)
        {
            buttonText = "Submit";
        }
        else
        {
            if (election.Positions.Count > 1 && !HasCandidates(election.Positions[tabs.ActivePanelIndex + 1].Id))
            {
                buttonText = "Submit";
            }
        }
        StateHasChanged();

    }

    private bool _processing = false;
    bool CandidateClicked(CandidateResponse candidate, ElectionPositionResponse position)
    {
        if (ballot.Votes.Any(v => v.CandidateId == candidate.Id && v.PositionId == position.Id))
        {
            return false;
        }
        else
        {
            if (ballot.Votes.Any(v => v.PositionId == position.Id))
            {
                ballot.Votes.Remove(ballot.Votes.FirstOrDefault(v => v.PositionId == position.Id));
            }
            candidates.Where(c => c.ElectionPositionId == position.Id).ToList().ForEach(c => c.IsSelected = false);
            StateHasChanged();
            ballot.Votes.Add(new Vote { CandidateId = candidate.Id, PositionId = position.Id });
            return true;
        }

    }
    string buttonText = "Next";
    async void ProcessSomething(int index)
    {
        _processing = true;
        if (ballot.Votes.Count <= index)
        {
            _processing = false;
            return;
        }
        else
        {

            if (tabs.Panels.Count != election.Positions.Count)
            {

                _processing = false;
                StateHasChanged();
                return;
            }
            if (election.Positions.IndexOf(election.Positions.Last()) == index)
            {
                buttonText = "Submit";
                var dialog = dialogService.Show<SecreteKeyEntryDialog>("Enter Your Secrete Key");
                var result = await dialog.Result;
                if (!result.Cancelled)
                {
                    var response = (VoterVerificationResponse)result.Data;
                    if (response.Verified)
                    {
                        //Save to block chain.
                    }

                }

                _processing = false;
                StateHasChanged();
                return;
            }
            if (!HasCandidates(election.Positions[index + 1].Id))
            {
                buttonText = "Submit";
                var dialog = dialogService.Show<SecreteKeyEntryDialog>("Enter Your Secrete Key");
                var result = await dialog.Result;
                if (!result.Cancelled)
                {
                    var response = (VoterVerificationResponse)result.Data;
                    if (response.Verified)
                    {
                        //Save to block chain and send.
                        await nodeConnectionInstance.AddBallotAsync(ballot);
                        snackBar.Add("Your vote was registered.", Severity.Success);
                        var done = await dialogService.ShowMessageBox("Confirmation","Your vote was saved");
                        await authenticationService.SignOut();
                        ApplicationService.NotifyOncloseClicked(this, new EventArgs());
                    }

                }

                _processing = false;
                StateHasChanged();
                return;
            }
            tabs.ActivatePanel(index + 1, HasCandidates(election.Positions[index + 1].Id));
            _processing = false;
            StateHasChanged();
        }

    }



}
