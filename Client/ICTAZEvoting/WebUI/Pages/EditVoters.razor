@page "/voters"
@using ICTAZEVoting.Shared
@using System.Linq
@using System
@using ICTAZEVoting.Shared.Models
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime
@using ICTAZEVoting.WebUI.WebCam
@using System.Net.Http
@using System.IO
<EditForm OnValidSubmit="Submit" Model="@voter" OnInvalidSubmit='()=>snackBar.Add("fill in all required fields",Severity.Error)'>
    <DataAnnotationsValidator />
    <MudCard Elevation="25">
        <MudCardHeader Class="mud-theme-secondary">
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Add / Edit voters</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.VoterNumber" @bind-Value="voter.VoterNumber" Label="Voter Number" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.NRC" @bind-Value="voter.PersonalDetails.NRC" Label="NRC Number" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.FirstName" @bind-Value="voter.PersonalDetails.FirstName" Label="First Name" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.MiddleName" @bind-Value="voter.PersonalDetails.MiddleName" Label="Middle Name" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.LastName" @bind-Value="voter.PersonalDetails.LastName" Label="Last Name" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudDatePicker For="()=>voter.PersonalDetails.DateOfBirth" @bind-Date="voter.PersonalDetails.DateOfBirth" Label="Date of Birth" Editable="true" Placeholder="Select Date" Variant="Variant.Outlined" /></Animate></MudItem>
                <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.PhoneNumber" @bind-Value="voter.PersonalDetails.PhoneNumber" Label="Phone" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.Email" @bind-Value="voter.PersonalDetails.Email" Label="Email Address" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                        <MudSelect T="Gender" @bind-Value="voter.PersonalDetails.Gender" Label="Gender" Variant="Variant.Outlined">
                            @foreach (var item in Enum.GetValues<Gender>())
                            {
                                <MudSelectItem T="Gender" Value="@item">
                                    @item.ToString()
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </Animate>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                        <MudSelect T="Guid" @bind-Value="voter.PolingStationId" Label="Polling Station" Variant="Variant.Outlined">
                            <MudSelectItem T="Guid" Value="default">No station selected</MudSelectItem>
                            @foreach (var item in pollingStations)
                            {
                                <MudSelectItem T="Guid" Value="@item.Id">
                                    @item.Name
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </Animate>
                </MudItem>
                <MudItem xs="12" sm="6" md="2"></MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudPaper Class="p-2" Elevation="25" MinWidth="325" MinHeight="245">
                        @if (!string.IsNullOrEmpty(frameUri))
                        {
                            <img width="320" height="240" src="@frameUri" />
                        }
                        @if (!hideVideo)
                        {

                            <video id="videoFeed" width="320" height="240" />

                        }
                        <center>
                            <MudButtonGroup>
                                <MudButton ButtonType="ButtonType.Button" Size="Size.Small" Color="Color.Info" StartIcon="@Icons.Material.Filled.Refresh">Refresh</MudButton>
                                <MudButton ButtonType="ButtonType.Button" OnClick="CaptureFrame" Disabled="@hideVideo" Size="Size.Small" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Camera">Capture</MudButton>
                            </MudButtonGroup>
                        </center>
                    </MudPaper>
                </MudItem>
            </MudGrid>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info">Save voter</MudButton>
        </MudCardContent>
    </MudCard>
</EditForm>
<br />
<MudTable Style="color: white" Elevation="25" Items="voters">
    <ToolBarContent>
        <MudText Typo="Typo.h4">Voters</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Categories..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Voter</MudTh>
        <MudTh>NRC No.</MudTh>
        <MudTh>Gender</MudTh>
        <MudTh>Poling Station</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="voter Number">@context.VoterNumber</MudTd>

        <MudTd DataLabel="">
            <MudButton OnClick='()=>Edit(context)' StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Warning">Edit</MudButton>
            <MudButton OnClick='()=>Delete(context.Id)' StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error">Remove</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Filled.ArrowCircleUp" />
</MudScrollToTop>
<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private string frameUri;
    private string searchString = "";
    bool dis = true;
    bool hideVideo;
    private Voter voter = new Voter();
    private List<Voter> voters = new List<Voter>();
    List<PollingStation> pollingStations = new();
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }
    async Task Refresh()
    {
        voter = new();
        hideVideo = false;
        isEditing = false;
        frameUri = null;
        voter.PersonalDetails = new PersonalDetails();
        await StartVideFrame();
        StateHasChanged();
    }
    bool isEditing;
    private async Task Submit()
    {

    }
    private void Edit(Voter record)
    {
        isEditing = true;
    }

    MudMessageBox mbox { get; set; }
    private async Task Delete(Guid id)
    {
        bool? confirmed = await mbox.Show();
        if (confirmed == true)
        {
            await Delete(id);
            snackBar.Add("Loan Deleted.", Severity.Success);
        }
    }

    private async Task StartVideFrame()
    {
        await JsRuntime.InvokeVoidAsync("startVideo", "videoFeed");
        dis = false;
        StateHasChanged();
    }
    private async Task CaptureFrame()
    {
        await JsRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
    }


    [JSInvokable]
    public void ProcessImage(string imageString)
    {
        frameUri = imageString;
        hideVideo = true;
        StateHasChanged();
        byte[] imageData = Convert.FromBase64String(imageString.Split(',')[1]);
        //

    }

}

