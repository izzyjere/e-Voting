@page "/voters"
@using ICTAZEVoting.Shared
@using System.Linq
@using System
@using ICTAZEVoting.Shared.Models
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime
@using ICTAZEVoting.Shared.Responses.Domain
@using ICTAZEVoting.WebUI.WebCam
@using System.Net.Http
@using System.IO

<EditForm OnValidSubmit="NextTab" Model="@voter" OnInvalidSubmit='()=>snackBar.Add("fill in all required fields",Severity.Error)'>
    <ObjectGraphDataAnnotationsValidator />
    <MudCard Elevation="25">
        <MudCardHeader Class="mud-theme-info">
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Add / Edit voters</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs @ref="tabs" Border="true">
                <MudTabPanel Text="Voter Details">
                    <MudGrid Class="mt-2 mb-3">
                        <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.NRC" @bind-Value="voter.PersonalDetails.NRC" Label="NRC Number" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.FirstName" @bind-Value="voter.PersonalDetails.FirstName" Label="First Name" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.MiddleName" @bind-Value="voter.PersonalDetails.MiddleName" Label="Middle Name" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.LastName" @bind-Value="voter.PersonalDetails.LastName" Label="Last Name" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudDatePicker For="()=>voter.PersonalDetails.DateOfBirth" @bind-Date="voter.PersonalDetails.DateOfBirth" Label="Date of Birth" Editable="true" Placeholder="Select Date" Variant="Variant.Outlined" /></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.PhoneNumber" @bind-Value="voter.PersonalDetails.PhoneNumber" Label="Phone" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3"><Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>voter.PersonalDetails.Email" @bind-Value="voter.PersonalDetails.Email" Label="Email Address" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                                <MudSelect T="Gender" @bind-Value="voter.PersonalDetails.Gender" Label="Gender" Variant="Variant.Outlined">
                                    @foreach (var item in Enum.GetValues<Gender>())
                                    {
                                        <MudSelectItem T="Gender" Value="@item">
                                            @item.ToString()
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </Animate>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                                <MudSelect T="Guid" @bind-Value="voter.PolingStationId" Label="Polling Station" Variant="Variant.Outlined">
                                    <MudSelectItem T="Guid" Value="default">No station selected</MudSelectItem>
                                    @foreach (var item in pollingStations)
                                    {
                                        <MudSelectItem T="Guid" Value="@item.Id">
                                            @item.Name
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </Animate>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3"><MudTextField For="()=>voter.PersonalDetails.Address" @bind-Value="voter.PersonalDetails.Address" Label="Physical Address" Variant="Variant.Outlined"></MudTextField></MudItem>
                    </MudGrid>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info">Next</MudButton>
                </MudTabPanel>
                <MudTabPanel Text="Face Capture">
                    <MudGrid Class="mt-2">
                        <MudItem xs="12">
                            <center>
                                <MudPaper Class="p-2" Elevation="0" MinWidth="325" MinHeight="245">
                                    @if (!string.IsNullOrEmpty(frameUri))
                                    {
                                        <img width="320" height="240" src="@frameUri" />
                                    }
                                    @if (!hideVideo && !isEditing)
                                    {

                                        <video id="videoFeed" width="320" height="240" />
                                        <canvas id="currentFrame" class="d-none" width="320" height="240" />

                                    }
                                    <center>
                                        <MudButtonGroup>
                                            <MudButton Disabled="@isEditing" OnClick="StartVideFrame" ButtonType="ButtonType.Button" Size="Size.Small" Color="Color.Info" StartIcon="@Icons.Material.Filled.Refresh">Refresh</MudButton>
                                            <MudButton ButtonType="ButtonType.Button" OnClick="CaptureFrame" Disabled="@hideVideo" Size="Size.Small" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Camera">Capture</MudButton>
                                        </MudButtonGroup>
                                    </center>
                                </MudPaper>
                            </center>
                        </MudItem>
                    </MudGrid>
                    <MudButton Class="mt-6" OnClick="()=>Save()" Disabled="@(!enable)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">Save</MudButton>
                </MudTabPanel>
            </MudTabs>
        </MudCardContent>
    </MudCard>
</EditForm>

<br />
<MudTable Style="color: white" Elevation="25" Items="voters">
    <ToolBarContent>
        <MudText Typo="Typo.h4">Voters</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for voters..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Voter</MudTh>
        <MudTh>NRC No.</MudTh>
        <MudTh>Gender</MudTh>
        <MudTh>Age</MudTh>
        <MudTh>Poling Station</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Square="true" Class="mud-elevation-25">
                            @if (string.IsNullOrEmpty(context.PersonalDetails.PictureUrl))
                            {
                                <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Size="Size.Large" />
                            }
                            else
                            {
                                <MudImage ObjectFit="ObjectFit.Contain" Width="50" Height="50" Src="@(fileService.GetFileUrl(context.PersonalDetails.PictureUrl))" />
                            }
                        </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1"><b>@context.PersonalDetails.FirstName @context.PersonalDetails.LastName</b></MudText>
                        <MudText Typo="Typo.body2">@context.PersonalDetails.Email</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>
        </MudTd>
        <MudTd>
            @context.PersonalDetails.NRC
        </MudTd>
        <MudTd>
            @context.PersonalDetails.Gender.ToString()
        </MudTd>
        <MudTd>@(DateTime.Now.Year-context.PersonalDetails.DateOfBirth.Year) years</MudTd>
        <MudTd>
            @context.PolingStation.Name
        </MudTd>
        <MudTd DataLabel="">
            <MudButton OnClick='()=>Edit(context)' StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Warning">Edit</MudButton>
            <MudButton OnClick='()=>Delete(context.Id)' StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error">Remove</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Filled.ArrowCircleUp" />
</MudScrollToTop>
<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private string frameUri;
    private string searchString = "";
    bool dis = true;
    bool hideVideo;
    MudTabs tabs;
    private Voter voter = new Voter();
    private List<VoterResponse> voters = new List<VoterResponse>();
    List<PollingStation> pollingStations = new();
    ClaimsPrincipal claimsPrincipal = new();
    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = await authenticationService.CurrentUser();
        await Refresh();
    }
    async Task Refresh()
    {
        voter = new();
        hideVideo = false;
        isEditing = false;
        enable = false;
        frameUri = null;
        voter.PersonalDetails = new PersonalDetails();
        pollingStations = await systemAdminService.GetPollingStations(claimsPrincipal.GetUserId().ToString());
        voters = await voterSevice.GetAll();
        await StartVideFrame();
        StateHasChanged();
    }
    bool isEditing;
    private void NextTab()
    {
        tabs.ActivatePanel(1, true);
    }
    async Task Save()
    {
        if (!isEditing)
        {
            //adding
            var result = await voterSevice.Register(voter);
            if (result.Succeeded)
            {
                await javaScript.InvokeAsync<object>("downloadPasswordFile", result.Data[1], result.Data[0]); //preferably sent to voter's email.
                snackBar.Add(result.Messages.First(), Severity.Success);
                await Refresh();
            }
            else
            {
                snackBar.Add(result.Messages.First(), Severity.Error);
            }
        }
        else
        {
            var result = await voterSevice.Update(voter);
            if (result.Succeeded)
            {
                snackBar.Add(result.Messages.First(), Severity.Success);

            }
            else
            {
                snackBar.Add(result.Messages.First(), Severity.Error);
            }

        }

    }
    private void Edit(VoterResponse record)
    {
        voter = new();
        voter.PersonalDetails = new();
        voter.Id = record.Id;
        voter.PolingStationId = record.PolingStationId;
        voter.PersonalDetails.FirstName = record.PersonalDetails.FirstName;
        voter.PersonalDetails.MiddleName = record.PersonalDetails.MiddleName;
        voter.PersonalDetails.LastName = record.PersonalDetails.LastName;
        voter.PersonalDetails.Gender = record.PersonalDetails.Gender;
        voter.PersonalDetails.DateOfBirth = record.PersonalDetails.DateOfBirth;
        voter.PersonalDetails.Address = record.PersonalDetails.Address;
        voter.PersonalDetails.NRC = record.PersonalDetails.NRC;
        voter.PersonalDetails.PhoneNumber = record.PersonalDetails.PhoneNumber;
        voter.PersonalDetails.Email = record.PersonalDetails.Email;
        voter.PersonalDetails.PictureUrl = record.PersonalDetails.PictureUrl;
        voter.PersonalDetails.UserId = record.PersonalDetails.UserId;
        isEditing = true;
        enable = true;
        StateHasChanged();
    }

    MudMessageBox mbox { get; set; }
    private async Task Delete(Guid id)
    {
        bool? confirmed = await mbox.Show();
        if (confirmed == true)
        {
            await Delete(id);
            snackBar.Add("Loan Deleted.", Severity.Success);
        }
    }

    private async Task StartVideFrame()
    {
        await JsRuntime.InvokeVoidAsync("startVideo", "videoFeed");
        dis = false;
        StateHasChanged();
    }
    private async Task CaptureFrame()
    {
        await JsRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
    }
    bool enable;

    [JSInvokable]
    public async void ProcessImage(string imageString)
    {
        frameUri = imageString;
        hideVideo = true;
        StateHasChanged();
        byte[] imageData = Convert.FromBase64String(imageString.Split(',')[1]);
        var request = new UploadRequest
            {
                Data = imageData,
                FileName = "image.jpeg",
                Type = UploadType.Biometric
            };
        var rs = await fileService.UploadFile(request);
        if (rs.Succeeded)
        {
            voter.PersonalDetails.PictureUrl = rs.Data.Path;
            enable = true;
            StateHasChanged();
            snackBar.Add("Upload Succeeded.", Severity.Success);
            return;
        }
        else
        {
            snackBar.Add("We couldn't upload your image. try again", Severity.Error);
            return;
        }
        //

    }

}

