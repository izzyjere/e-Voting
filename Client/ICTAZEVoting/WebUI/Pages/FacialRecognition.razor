@page "/verify-face"
@layout AuthLayout
@inject IJSRuntime JsRuntime

<Animate Animation="Animations.FadeDownRight" Duration="TimeSpan.FromSeconds(1)">
    <center>
        <MudCard Style="width:60%" Elevation="25" Outlined="true">
            <center>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudAvatar Size="Size.Large" Color="Color.Secondary">
                            <MudImage Width="60" Height="60" Src="@Profile.ProfilePicture" ObjectFit="ObjectFit.Contain"/>
                        </MudAvatar>
                        <MudText Typo="Typo.body1">@Profile.FullName</MudText>                      
                    </CardHeaderContent>                   
                </MudCardHeader>
                <MudPaper Elevation="0" Class="p-2" MinWidth="325" MinHeight="245">
                    @if (!string.IsNullOrEmpty(frameUri))
                    {
                        <img width="320" height="240" src="@frameUri" />
                    }
                    @if (!hideVideo)
                    {

                        <video id="videoFeed" width="320" height="240" />
                        <canvas id="currentFrame" class="d-none" width="320" height="240" />

                    }
                    <center>
                        <MudButtonGroup>
                            <MudButton ButtonType="ButtonType.Button" OnClick="Refresh" Size="Size.Small" Color="Color.Info" StartIcon="@Icons.Material.Filled.Refresh">REFRESH</MudButton>
                            <MudButton ButtonType="ButtonType.Button" OnClick="CaptureFrame" Disabled="@hideVideo" Size="Size.Small" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Camera">VERIFY</MudButton>
                        </MudButtonGroup>
                    </center>
                </MudPaper>
                <MudCardContent>
                    <MudText Typo="Typo.body2"></MudText>
                </MudCardContent>
            </center>
        </MudCard>
    </center>

</Animate>
<br />


@if (showProgress)
{
    <Animate Animation="Animations.FadeDownRight" Duration="TimeSpan.FromSeconds(1)">
        <center>
            <MudCard Style="width:60%">
                <MudCardContent>
                    <center>
                        <MudChip Color="Color.Success" Label="true">
                            <MudText Align="Align.Center">
                                VERIFYING
                            </MudText>
                        </MudChip>
                    </center>

                    @*<MudText Style="font-family:Cambria; font-size:large; color:blue" Align="Align.Center">VERIFYING</MudText>*@
                    <MudProgressLinear Color="Color.Success" Size="Size.Large" Indeterminate="true" Class="my-7" />
                </MudCardContent>
                @*    <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                    </MudCardActions>*@
            </MudCard>
        </center>
    </Animate>

}



@code {
    private string frameUri;
    private string searchString = "";
    bool dis = true;
    bool hideVideo;
    private Voter voter = new Voter();
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; }
    ClaimsPrincipal claimsPrincipal = new();
    bool showProgress = false;
    UserProfileResponse Profile = new();
    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = (await authenticationState).User;
        if (claimsPrincipal.Identity.IsAuthenticated)
        {  
            var req = new UserProfileRequest {Id = claimsPrincipal.GetUserId()};
            var request = await httpClient.PostAsJsonAsync($"{ApiEndpoints.UserProfile}", req);            
            var r = await request.ToResult<UserProfileResponse>();
            if(r.Succeeded)
            {
                Profile = r.Data;
            }

        }
        await Refresh();
    }
    async Task Refresh()
    {
        voter = new();
        hideVideo = false;
        frameUri = null;        
        await StartVideFrame();
        StateHasChanged();
    }

    private async Task StartVideFrame()
    {
        await JsRuntime.InvokeVoidAsync("startVideo", "videoFeed");
        dis = false;
        StateHasChanged();
    }
    private async Task CaptureFrame()
    {
        showProgress=true;
        StateHasChanged();
        Navigation.NavigateTo("authenticate");
        // await JsRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
    }


    [JSInvokable]
    public void ProcessImage(string imageString)
    {
        frameUri = imageString;
        hideVideo = true;
        StateHasChanged();
        byte[] imageData = Convert.FromBase64String(imageString.Split(',')[1]);
        //

    }

}
