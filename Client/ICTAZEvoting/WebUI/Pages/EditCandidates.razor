@page "/candidates"

@using ICTAZEVoting.Shared
@using System.Linq
@using System
@using ICTAZEVoting.Shared.Models
@using ICTAZEVoting.Shared.Responses.Domain
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime

<MudCard Elevation="25">
    <MudCardHeader Class="mud-theme-info">
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Candidates</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTabs @ref="tabs" Border="true">
            <MudTabPanel Text="Candidate Details">
                <EditForm OnValidSubmit="NextTab" OnInvalidSubmit='()=>snackBar.Add("please fill in all required.",Severity.Error)' Model="@candidate">
                    <ObjectGraphDataAnnotationsValidator />
                    <MudGrid Class="mt-4">
                        <MudItem xs="12" sm="6" md="3">
                            <MudSelect T="Guid" Disabled="@electionChosen" Placeholder="Select election" @bind-Value="election.Id" Label="Election" Variant="Variant.Outlined">
                                <MudSelectItem T="Guid" Value="default">No election selected</MudSelectItem>
                                @foreach (var item in elections)
                                {
                                    <MudSelectItem T="Guid" Value="@item.Id">
                                        @item.Name (@item.ElectionDate.ToString("dd MMM yyyy H:mm") - @item.ClosingTime.ToString("dd MMM yyyy H:mm"))
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudSelect Disabled="@(!GetPositions(election.Id).Any())" T="Guid" @bind-Value="candidate.ElectionPositionId" Label="Position" Variant="Variant.Outlined">
                                <MudSelectItem T="Guid" Value="default">No position selected</MudSelectItem>
                                @foreach (var item in GetPositions(election.Id))
                                {
                                    <MudSelectItem T="Guid" Value="@item.Id">
                                        @item.Position
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                                <MudSelect T="Guid" @bind-Value="candidate.PollingStationId" Label="Polling Station" Variant="Variant.Outlined">
                                    <MudSelectItem T="Guid" Value="default">No station selected</MudSelectItem>
                                    @foreach (var item in pollingStations)
                                    {
                                        <MudSelectItem T="Guid" Value="@item.Id">
                                            @item.Name
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </Animate>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3"> <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>candidate.PersonalDetails.NRC" @bind-Value="candidate.PersonalDetails.NRC" Label="NRC Number" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3"> <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>candidate.PersonalDetails.FirstName" @bind-Value="candidate.PersonalDetails.FirstName" Label="First Name" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3"> <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>candidate.PersonalDetails.MiddleName" @bind-Value="candidate.PersonalDetails.MiddleName" Label="Middle Name" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3"> <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudTextField For="()=>candidate.PersonalDetails.FullName" @bind-Value="candidate.PersonalDetails.LastName" Label="Last Name" Variant="Variant.Outlined"></MudTextField></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3"> <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)"><MudDatePicker For="()=>candidate.PersonalDetails.DateOfBirth" @bind-Date="candidate.PersonalDetails.DateOfBirth" Label="Date of Birth" Editable="true" Placeholder="Select Date" Variant="Variant.Outlined" /></Animate></MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudSelect T="Gender" @bind-Value="candidate.PersonalDetails.Gender" Label="Gender" Variant="Variant.Outlined">
                                @foreach (var item in Enum.GetValues<Gender>())
                                {
                                    <MudSelectItem T="Gender" Value="@item">
                                        @item.ToString()
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3"><MudTextField For="()=>candidate.PersonalDetails.PhoneNumber" @bind-Value="candidate.PersonalDetails.PhoneNumber" Label="Phone" Variant="Variant.Outlined"></MudTextField></MudItem>
                        <MudItem xs="12" sm="6" md="3"><MudTextField For="()=>candidate.PersonalDetails.Email" @bind-Value="candidate.PersonalDetails.Email" Label="Email Address" Variant="Variant.Outlined"></MudTextField></MudItem>
                        <MudItem xs="12" sm="6" md="3"><MudTextField For="()=>candidate.PersonalDetails.Address" @bind-Value="candidate.PersonalDetails.Address" Label="Physical Address" Variant="Variant.Outlined"></MudTextField></MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudSelect T="Guid" @bind-Value="candidate.PoliticalPartyId" Label="Political Party" Variant="Variant.Outlined">
                                <MudSelectItem T="Guid" Value="default">No party selected</MudSelectItem>
                                @foreach (var item in politicalParties)
                                {
                                    <MudSelectItem T="Guid" Value="@item.Id">
                                        @item.Name
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                    <MudButton Class="mt-6" ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Next</MudButton>
                </EditForm>
            </MudTabPanel>
            <MudTabPanel Disabled="true" Text="Picture Upload">
                <MudGrid Class="mt-4">
                    <MudItem xs="12">
                        <center>
                            <MudPaper Class="p-2" Elevation="0" MinWidth="325" MinHeight="245">
                                @if (!string.IsNullOrEmpty(frameUri))
                                {
                                    <img width="320" height="240" src="@frameUri" />
                                }
                                @if (!hideVideo)
                                {

                                    <video id="videoFeed" width="320" height="240" />
                                    <canvas id="currentFrame" class="d-none" width="320" height="240" />

                                }
                                <center>
                                    <MudButtonGroup>
                                        <MudButton OnClick="StartVideFrame" ButtonType="ButtonType.Button" Size="Size.Small" Color="Color.Info" StartIcon="@Icons.Material.Filled.Refresh">Refresh</MudButton>
                                        <MudButton ButtonType="ButtonType.Button" OnClick="CaptureFrame" Disabled="@hideVideo" Size="Size.Small" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Camera">Capture</MudButton>
                                    </MudButtonGroup>
                                </center>
                            </MudPaper>
                        </center>
                    </MudItem>
                </MudGrid>
                <MudButton Class="mt-6" OnClick="()=>Save()" Disabled="@(!enable)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">Save</MudButton>
            </MudTabPanel>
        </MudTabs>
    </MudCardContent>
</MudCard>
<br />
<br />
<br />
<Animate Animation="Animations.FadeDown" Duration="TimeSpan.FromSeconds(0.5)">
    <MudPaper Class="p-3" Elevation="25">
        <MudExpansionPanels>
            @foreach (var item in elections)
            {
                <MudExpansionPanel Class="mb-3" Text='@($"{item.Name} ({item.ElectionDate.ToString("dd MMM yyyy H:mm")} - {item.ClosingTime.ToString("dd MMM yyyy H:mm")})")'>
                    <MudButton OnClick="()=>AddCandidate(item)" StartIcon="@Icons.Material.Filled.AddBox" Color="Color.Success">Add Candidate</MudButton>
                    @if (!(GetCandidates(item.Id.ToString()).Any()))
                    {
                        <MudAlert Variant="Variant.Outlined" Severity="Severity.Info" Dense="true">No candidates found for this election</MudAlert>
                    }
                    else
                    {
                        <MudTable Bordered="true" Hover="true" Style="color: white" Elevation="25" Items="GetCandidates(item.Id.ToString())">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Candidates</MudText>
                                <MudSpacer />
                                <MudTextField @bind-Value="searchString" Placeholder="Search for Candidates..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh>Candidate</MudTh>
                                <MudTh>NRC Number</MudTh>
                                <MudTh>Gender</MudTh>
                                <MudTh>Age</MudTh>
                                <MudTh>Political Party</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>
                                    <MudCard>
                                        <MudCardHeader>
                                            <CardHeaderAvatar>
                                                <MudAvatar Square="true" Class="mud-elevation-25">
                                                    @if (string.IsNullOrEmpty(context.PersonalDetails.PictureUrl))
                                                    {
                                                <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Size="Size.Large" />
                                                    }
                                                    else
                                                    {
                                                <MudImage ObjectFit="ObjectFit.Contain" Width="50" Height="50" Src="@(fileService.GetFileUrl(context.PersonalDetails.PictureUrl))" />
                                                    }
                                        </MudAvatar>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1"><b>@context.PersonalDetails.FirstName @context.PersonalDetails.LastName</b></MudText>
                                        <MudText Typo="Typo.body2">@context.Position.Position</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                            </MudCard>
                        </MudTd>
                        <MudTd>
                            @context.PersonalDetails.NRC
                        </MudTd>
                        <MudTd>
                            @context.PersonalDetails.Gender.ToString()
                        </MudTd>
                        <MudTd>@(DateTime.Now.Year-context.PersonalDetails.DateOfBirth.Year) years</MudTd>
                        <MudTd>
                            @context.PoliticalParty.Name
                        </MudTd>
                        <MudTd DataLabel="">
                            <MudButton OnClick='()=>Edit(context)' StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Warning">Edit</MudButton>
                            <MudButton OnClick='()=>Delete(context.Id)' StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error">Remove</MudButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
                    }
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </MudPaper>
</Animate>
<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Filled.ArrowCircleUp" />
</MudScrollToTop>
<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>


@code {
    private string searchString = "";
    private Candidate candidate = new Candidate();
    List<PollingStation> pollingStations = new();
    private List<CandidateResponse> candidates = new List<CandidateResponse>();
    private List<ElectionResponse> elections = new List<ElectionResponse>();
    private List<PoliticalPartyResponse> politicalParties = new();
    ElectionResponse election = new();
    ClaimsPrincipal claimsPrincipal = new();
    bool electionChosen;
    bool hideVideo;
    string frameUri;
    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = await authenticationService.CurrentUser();
        await Refresh();
    }
    async void AddCandidate(ElectionResponse election)
    {
        this.election = election;
        electionChosen = true;
        candidate = new();
        candidate.PersonalDetails = new();
        StateHasChanged();
    }
    List<CandidateResponse> GetCandidates(string electionId)
    {
        return candidates.Where(c => c.Position.ElectionId.ToString() == electionId).ToList();
    }
    bool isEditing;
    List<ElectionPositionResponse> GetPositions(Guid electionid)
    {
        var el = elections.FirstOrDefault(e => e.Id == electionid);
        if (el == null)
        {
            return new();
        }
        return el.Positions;
    }
    private void Edit(CandidateResponse record)
    {
        candidate = new();
        candidate.PersonalDetails = new();
        candidate.Id = record.Id;
        candidate.ElectionPositionId = record.ElectionPositionId;
        candidate.PoliticalPartyId = record.PoliticalPartyId;
        candidate.PersonalDetails.FirstName = record.PersonalDetails.FirstName;
        candidate.PersonalDetails.MiddleName = record.PersonalDetails.MiddleName;
        candidate.PersonalDetails.LastName = record.PersonalDetails.LastName;
        candidate.PersonalDetails.Gender = record.PersonalDetails.Gender;
        candidate.PersonalDetails.DateOfBirth = record.PersonalDetails.DateOfBirth;
        candidate.PersonalDetails.Address = record.PersonalDetails.Address;
        candidate.PersonalDetails.NRC = record.PersonalDetails.NRC;
        candidate.PersonalDetails.PhoneNumber = record.PersonalDetails.PhoneNumber;
        candidate.PersonalDetails.Email = record.PersonalDetails.Email;
        candidate.PersonalDetails.PictureUrl = record.PersonalDetails.PictureUrl;
        candidate.PersonalDetails.UserId = record.PersonalDetails.UserId;
        isEditing = true;
        snackBar.Add("Candidate Saved.", Severity.Success);
        StateHasChanged();
    }

    void NextTab()
    {
        tabs.ActivatePanel(1, true);
    }
    async Task Save()
    {
        
        if (!isEditing)
        {
            //adding
            var result = await electionService.AddCandidate(candidate);
            if (result.Succeeded)
            {
                await javaScript.InvokeAsync<object>("downloadPasswordFile", result.Data[1], result.Data[0]); //preferably sent to voter's email.
                snackBar.Add(result.Messages.First(), Severity.Success);
                await Refresh();
            }
            else
            {
                snackBar.Add(result.Messages.First(), Severity.Error);
            }
        }
        else
        {
            var result = await electionService.UpdateCandidate(candidate);
            if (result.Succeeded)
            {
                snackBar.Add(result.Messages.First(), Severity.Success);

            }
            else
            {
                snackBar.Add(result.Messages.First(), Severity.Error);
            }

        }

    }

    async Task Refresh()
    {
        candidate = new();
        election = new();
        candidate.PersonalDetails = new PersonalDetails();
        pollingStations = await systemAdminService.GetPollingStations(claimsPrincipal.GetUserId().ToString());
        elections = await electionService.GetPendingElections();
        politicalParties = await electionService.GetPoliticalPartyList();
        isEditing = false;
        candidates = await electionService.GetCandidateList();
        await StartVideFrame();
        StateHasChanged();
    }


    MudMessageBox mbox { get; set; }
    private async Task Delete(Guid id)
    {
        bool? confirmed = await mbox.Show();
        if (confirmed == true)
        {
            await Delete(id);
            snackBar.Add("Loan Deleted.", Severity.Success);
        }
    }
    private async Task StartVideFrame()
    {   
        frameUri = null;
        enable = false;
        hideVideo = false;
        await JsRuntime.InvokeVoidAsync("startVideo", "videoFeed");
        StateHasChanged();
    }
    private async Task CaptureFrame()
    {
        await JsRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
    }
    MudTabs tabs;
    bool enable;
    [JSInvokable]
    public async void ProcessImage(string imageString)
    {
        frameUri = imageString;
        hideVideo = true;
        StateHasChanged();
        byte[] imageData = Convert.FromBase64String(imageString.Split(',')[1]);
        var request = new UploadRequest
            {
                Data = imageData,
                FileName = "image.jpeg",
                Type = UploadType.Biometric
            };
        var rs = await fileService.UploadFile(request);
        if (rs.Succeeded)
        {
            candidate.PersonalDetails.PictureUrl = rs.Data.Path;
            enable = true;
            StateHasChanged();
            snackBar.Add("Upload Succeeded.", Severity.Success);
            return;
        }
        else
        {
            snackBar.Add("We couldn't upload your image. try again", Severity.Error);
            return;
        }

    }

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        if (e.File.Size > 5000000)
        {
            snackBar.Add("Allowed file size is 5mbs", Severity.Error);
            return;
        }
        //TODO upload the files to the server
        var ms = new MemoryStream();
        var stream = e.File.OpenReadStream(5000000);
        await stream.CopyToAsync(ms);
        var request = new UploadRequest
            {
                Data = ms.GetBuffer(),
                FileName = e.File.Name,
                Type = UploadType.ProfilePicture
            };
        var rs = await fileService.UploadFile(request);
        if (rs.Succeeded)
        {
            candidate.PersonalDetails.PictureUrl = rs.Data.Path;
            StateHasChanged();
            snackBar.Add("Upload Succeeded.", Severity.Success);

        }
        else
        {
            snackBar.Add("We couldn't upload your image. try again", Severity.Error);
            return;
        }

    }
}
