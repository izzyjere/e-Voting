@page "/dashboard-voter"
@layout VotingLayout

@using ICTAZEVoting.Shared
@using System.Linq
@using System
@using ICTAZEVoting.Shared.Models
@using ICTAZEVoting.Shared.Responses.Domain
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime

@if (currentElection == null)
{
    
   <MudAlert CloseIconClicked='async ()=> { await authenticationService.SignOut(); Navigation.NavigateTo("/");}' ShowCloseIcon="true" Severity="Severity.Error">No election has been setup.</MudAlert> 
     
}
else if (currentElection.Status == ElectionStatus.Open)
{
    <MudContainer Class="d-flex justify-center align-center">
        <MudContainer Class="d-flex flex-column justify-center" style="width: 200px; height: 100px">
            <MudImage Src="images/logo.png" ObjectPosition="ObjectPosition.Center" />
        </MudContainer>
    </MudContainer>

    <MudContainer Class="d-flex flex-column justify-center">
        <MudText Style="font-family: fantasy" Typo="Typo.h4" Align="Align.Center"><b>THE REPUBLIC OF ZAMBIA</b></MudText>
        <MudText Style="font-family: fantasy" Typo="Typo.h5" Align="Align.Center"><b>2026 GENERAL ELECTIONS</b></MudText>
    </MudContainer>

    <MudContainer Class="d-flex flex-column justify-center">
        <MudText Style="font-family: 'Arial Rounded MT'" Typo="Typo.h6" Align="Align.Center"><b>HOW TO VOTE:</b></MudText>
    </MudContainer>

    <MudContainer Class="d-flex justify-center align-center">
        <video autoplay width="640" height="240" controls>
            <source src="Videos/howtovote.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>
    </MudContainer>

    <br />
    <br />

    <MudContainer Class="d-flex justify-center align-center">
        <a href="voting">
            <MudButton EndIcon="@Icons.Material.Filled.ScheduleSend" Variant="Variant.Filled" Color="Color.Info" Style="width: 200px; height: 60px;" FullWidth="false">Proceed To Vote</MudButton>
        </a>
    </MudContainer>
}
else if (currentElection.Status == ElectionStatus.Pending)
{
   
            <MudAlert CloseIconClicked='async ()=> { await authenticationService.SignOut(); Navigation.NavigateTo("/");}' ShowCloseIcon="true"    Severity="Severity.Info">The election hasn't started.</MudAlert>
    
}
else if (currentElection.Status == ElectionStatus.Closed)
{
   
   <MudAlert CloseIconClicked='async ()=> { await authenticationService.SignOut(); Navigation.NavigateTo("/");}' ShowCloseIcon="true"  Severity="Severity.Error">The election has been closed.</MudAlert>
       
}




@code {
    ElectionResponse currentElection = null;



}




