@page "/audit-trails"
@using ICTAZEVoting.Shared.Responses.Audit
@using System.Globalization

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>
<MudText>Audit Trails</MudText>
@if (!_loaded)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTable Hover="false" Dense="@_dense" Bordered="@_bordered" Striped="@_striped" Elevation="25" Items="Trails" Filter="new Func<RelatedAuditTrail, bool>(Search)" @bind-trail="_trail" CustomHeader="true">
        <ToolBarContent>
            <div class="justify-center mud-text-align-center">

                <MudButton DisableElevation IconColor="Color.Secondary" Variant="Variant.Filled" OnClick="ExportToExcelAsync" StartIcon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Surface">"Export To Excel"</MudButton>

            </div>
            <MudSpacer />

            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search for Trails" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>

        </ToolBarContent>
        <HeaderContent>
            <MudTHeadRow IgnoreCheckbox="true">
                <MudTh colspan="2">
                    <MudDateRangePicker @ref="_dateRangePicker" PickerVariant="PickerVariant.Dialog" Label="Date Range For Searching" @bind-DateRange="_dateRange">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _dateRangePicker.Clear())">Clear</MudButton>
                            <MudButton OnClick="@(() => _dateRangePicker.Close(false))">"Cancel"</MudButton>
                            <MudButton Color="Color.Primary" OnClick="@(() => _dateRangePicker.Close())">"Ok"</MudButton>
                        </PickerActions>
                    </MudDateRangePicker>
                </MudTh>
                <MudTh colspan="3" Style="text-align: right">
                    <MudSwitch @bind-Checked="@_searchInOldValues" Color="Color.Primary" Style="margin-left: 5px;">Search in Old Values</MudSwitch>
                    <MudSwitch @bind-Checked="@_searchInNewValues" Color="Color.Primary" Style="margin-left: 5px;">Search in New Values</MudSwitch>
                </MudTh>
            </MudTHeadRow>

            <MudTHeadRow IgnoreCheckbox="true">
                <MudTh><MudTableSortLabel SortBy="new Func<RelatedAuditTrail, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<RelatedAuditTrail, object>(x => x.TableName)">Table Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<RelatedAuditTrail, object>(x => x.DateTime)">Date</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<RelatedAuditTrail, object>(x => x.Type)">Type</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: right"></MudTh>
            </MudTHeadRow>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">
                <MudHighlighter Text="@context.TableName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Date">
                <MudItem>
                    <MudChip Icon="@Icons.Material.Filled.Watch" IconColor="Color.Secondary" Label="true" Color="Color.Surface">"Local" : @context.LocalTime.ToString("G", CultureInfo.CurrentCulture)</MudChip>
                </MudItem>
                <MudItem>
                    <MudChip Icon="@Icons.Material.Filled.Watch" IconColor="Color.Secondary" Label="true" Color="Color.Surface">"UTC" : @context.DateTime.ToString("G", CultureInfo.CurrentCulture)</MudChip>
                </MudItem>
            </MudTd>
            <MudTd DataLabel="Tax">@context.Type</MudTd>
            <MudTd Style="text-align:right">
                <MudButton Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" OnClick="@(() => ShowBtnPress(context.Id))">@((context.ShowDetails == true) ? "Hide" : "Show") Trail Details</MudButton>
            </MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowDetails)
            {
                <MudTr>
                    <td colspan="5">
                        <MudCard Elevation="25">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudAlert Severity="Severity.Info" Typo="Typo.body1">"Details for Trail ID" : <strong>@context.Id</strong></MudAlert>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <table class="mud-table-root">
                                    <tbody class="mud-table-body">
                                        <tr class="mud-table-row">
                                            <td>
                                                User Name
                                            </td>
                                            <td>
                                                <MudItem>
                                                    <MudChip Icon="@Icons.Material.Filled.AccountCircle" IconColor="Color.Secondary" Label="true" Color="Color.Surface">"UserName" : @context.UserName</MudChip>
                                                </MudItem>
                                            </td>
                                        </tr>
                                        <tr class="mud-table-row">
                                            <td>Remote IP Address</td>
                                            <td>
                                                <MudItem>
                                                    <MudChip IconColor="Color.Secondary" Label="true" Color="Color.Surface" Icon="@Icons.Material.Filled.Computer">"IP": @context.RemoteIpAddress</MudChip>
                                                </MudItem>
                                            </td>
                                        </tr>
                                        @if (!string.IsNullOrEmpty(context.AffectedColumns))
                                        {
                                            <tr class="mud-table-row" style="padding:10px!important">
                                                <td>Columns Affected</td>
                                                <td>
                                                    <MudItem>
                                                        @foreach (var column in context.AffectedColumns.Trim('[').Trim(']').Split(','))
                                                        {
                                                            <MudChip Label="true" Color="Color.Surface">@column.Replace('"', ' ').Trim()</MudChip>
                                                        }
                                                    </MudItem>
                                                </td>
                                            </tr>
                                        }
                                        <tr class="mud-table-row">
                                            <td>Primary Key</td>
                                            <td>
                                                <MudItem>
                                                    <MudChip Label="true" Color="Color.Surface">@context.PrimaryKey.Trim('{').Trim('}').Replace('"', ' ').Trim()</MudChip>
                                                </MudItem>
                                            </td>
                                        </tr>

                                        @if (!string.IsNullOrEmpty(context.OldValues))
                                        {
                                            <tr class="mud-table-row">
                                                <td>Old Values</td>
                                                <td>

                                                    <MudItem>
                                                        @foreach (var value in context.OldValues.Trim('{').Trim('}').Split(','))
                                                        {
                                                            @if (_searchInOldValues)
                                                            {
                                                                <MudChip Label="true" Color="Color.Warning">
                                                                    <MudHighlighter Text="@value.Replace('"', ' ').Trim()" HighlightedText="@_searchString" />
                                                                </MudChip>
                                                            }
                                                            else
                                                            {
                                                                <MudChip Label="true" Color="Color.Warning">@value.Replace('"', ' ').Trim()</MudChip>
                                                            }
                                                        }
                                                    </MudItem>
                                                </td>
                                            </tr>
                                        }
                                        @if (!string.IsNullOrEmpty(context.NewValues))
                                        {
                                            <tr class="mud-table-row">
                                                <td>New Values</td>
                                                <td>

                                                    <MudItem>
                                                        @foreach (var value in context.NewValues.Trim('{').Trim('}').Split(','))
                                                        {
                                                            @if (_searchInNewValues)
                                                            {
                                                                <MudChip Label="true" Color="Color.Success">
                                                                    <MudHighlighter Text="@value.Replace('"', ' ').Trim()" HighlightedText="@_searchString" />
                                                                </MudChip>
                                                            }
                                                            else
                                                            {
                                                                <MudChip Label="true" Color="Color.Success">@value.Replace('"', ' ').Trim()</MudChip>
                                                            }
                                                        }
                                                    </MudItem>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
        <FooterContent>
            <MudSwitch @bind-Checked="@_dense" Color="Color.Secondary" Style="margin-left: 5px;">"Dense"</MudSwitch>
            <MudSwitch @bind-Checked="@_striped" Color="Color.Tertiary" Style="margin-left: 5px;">"Striped"</MudSwitch>
            <MudSwitch @bind-Checked="@_bordered" Color="Color.Warning" Style="margin-left: 5px;">"Bordered"</MudSwitch>
        </FooterContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
@code {
    public List<RelatedAuditTrail> Trails = new();
    private RelatedAuditTrail _trail = new();
    private string _searchString = "";
    private bool _dense = true;
    private bool _striped = true;
    private bool _bordered = false;
    private bool _searchInOldValues = false;
    private bool _searchInNewValues = false;
    private MudDateRangePicker _dateRangePicker;
    private DateRange _dateRange;
    private ClaimsPrincipal _currentUser;
    private bool _loaded;
    private bool Search(AuditResponse response)
    {
        var result = false;

        // check Search String
        if (string.IsNullOrWhiteSpace(_searchString)) result = true;
        if (!result)
        {
            if (response.TableName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            {
                result = true;
            }
            if (_searchInOldValues &&
                response.OldValues?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            {
                result = true;
            }
            if (_searchInNewValues &&
                response.NewValues?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            {
                result = true;
            }
        }

        // check Date Range
        if (_dateRange?.Start == null && _dateRange?.End == null) return result;
        if (_dateRange?.Start != null && response.DateTime < _dateRange.Start)
        {
            result = false;
        }
        if (_dateRange?.End != null && response.DateTime > _dateRange.End + new TimeSpan(0, 11, 59, 59, 999))
        {
            result = false;
        }

        return result;
    }

    protected override async Task OnInitializedAsync()
    {

        await GetDataAsync();
        _loaded = true;
    }

    private async Task GetDataAsync()
    {
        var response = await systemAdminService.GetAuditsAsync();

        Trails = response
            .Select(x => new RelatedAuditTrail
                {
                    AffectedColumns = x.AffectedColumns,
                    DateTime = x.DateTime,
                    Id = x.Id,
                    UserName = x.UserName,
                    RemoteIpAddress = x.RemoteIpAddress,
                    NewValues = x.NewValues,
                    OldValues = x.OldValues,
                    PrimaryKey = x.PrimaryKey,
                    TableName = x.TableName,
                    Type = x.Type,
                    UserId = x.UserId,
                    LocalTime = DateTime.SpecifyKind(x.DateTime, DateTimeKind.Utc).ToLocalTime()
                }).ToList();

    }

    private void ShowBtnPress(int id)
    {
        _trail = Trails.First(f => f.Id == id);
        foreach (var trial in Trails.Where(a => a.Id != id))
        {
            trial.ShowDetails = false;
        }
        _trail.ShowDetails = !_trail.ShowDetails;
    }

    private async Task ExportToExcelAsync()
    {

    }

    public class RelatedAuditTrail : AuditResponse
    {
        public bool ShowDetails { get; set; } = false;
        public DateTime LocalTime { get; set; }
        
    }

}