
<AuthorizeView>
    <Authorized>       
        <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
            <MudCard Elevation="0" Square="true" Class="@Class" Style="@Style">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Image="@userProfile.ProfilePicture" />
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body2">@userProfile.FullName</MudText>
                        <MudText Typo="Typo.caption">@context.User.GetRole()</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>
        </Animate>
    </Authorized>
</AuthorizeView>


@code {
    [Parameter] public string Class { get; set; }
    [Parameter] public string Style { get; set; }
    UserProfileResponse userProfile = new();
    ClaimsPrincipal claimsPrincipal = new();
    [CascadingParameter] Task<AuthenticationState> authenticationState { get; set; }
    string userId = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = (await authenticationState).User;
        var request = await httpClient.GetAsync($"{ApiEndpoints.UserProfile}/{claimsPrincipal.GetUserId()}");
        var res = await request.ToResult<UserProfileResponse>();
        userProfile = res.Data;
    }
}