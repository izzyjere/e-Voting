@page "/politicalparties"

@using ICTAZEVoting.Shared
@using System.Linq
@using System
@using ICTAZEVoting.Shared.Models
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Political Party</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <EditForm OnValidSubmit="Save" OnInvalidSubmit='()=>snackBar.Add("Provide a name",Severity.Warning)' Model="@politicalParty">
            <MudGrid Justify="Justify.FlexEnd">
                <MudItem xs="12" sm="6" md="4">
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                        <MudTextField For="()=>politicalParty.Name" @bind-Value="politicalParty.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                    </Animate>
                </MudItem>

                <MudItem xs="12" sm="6" md="4">
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                        <MudTextField For="()=>politicalParty.Slogan" @bind-Value="politicalParty.Slogan" Label="Slogan" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                    </Animate>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <InputFile OnChange="UploadFiles" hidden accept=".png,.jpeg,.gif,.webp,.svg" id="fileInput"></InputFile>
                    <MudButton Class="mt-6" HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Info"
                               StartIcon="@Icons.Filled.CloudUpload"
                               for="fileInput">
                        Upload Party Logo
                    </MudButton>
                </MudItem>
                <MudItem xs="12">
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                        <MudTextField Lines="4" For="()=>politicalParty.Manifesto" @bind-Value="politicalParty.Manifesto" Label="Manifesto" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
                    </Animate>
                </MudItem>
            </MudGrid>
            <MudButton ButtonType="MudBlazor.ButtonType.Submit" Class="mt-6" Variant="Variant.Filled" Color="Color.Success">Save Political Party</MudButton>
        </EditForm>

    </MudCardContent>
</MudCard>

<Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
    <MudTable Bordered="true" Hover="true" Style="color: white; padding:2em;" Elevation="25" Items="politicalParties">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Political Parties</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search for Political Parties..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Party Name</MudTh>
            <MudTh>Slogan</MudTh>
            <MudTh>Manifesto</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Party">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Square="true" Class="mud-elevation-25">
                                @if (string.IsNullOrEmpty(context.LogoUrl))
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Campaign" Size="Size.Large" />
                                }
                                else
                                {
                                    <MudImage ObjectFit="ObjectFit.Contain" Width="50" Height="50" Src="@(httpClient.BaseAddress.ToString()+context.LogoUrl)" />
                                }
                            </MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1"><b>@context.Name</b></MudText>
                            <MudText Typo="Typo.body2">@context.Candidates?.Count Candidates</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                </MudCard>
            </MudTd>
            <MudTd DataLabel="Slogan">
                @context.Slogan
            </MudTd>
            <MudTd DataLabel="Manifesto">
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary">Show Manifesto</MudButton>
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudFab @onclick="@(()=>Edit(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                <MudFab @onclick="@(()=>Delete(context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</Animate>

<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Filled.ArrowCircleUp" />
</MudScrollToTop>
<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
    </YesButton>
</MudMessageBox>


@code {
    private string searchString = "";
    private PoliticalParty politicalParty = new PoliticalParty();
    private List<PoliticalParty> politicalParties = new List<PoliticalParty>();

    bool isEditing;
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }
    async Task Refresh()
    {
        politicalParty = new();
        isEditing = false;
        politicalParties = await electionService.GetPoliticalPartyList();
        StateHasChanged();
    }    
    async Task Save()
    {
        if (!isEditing)
        {
            //adding
            var result = await electionService.AddPoliticalParty(politicalParty);
            if (result.Succeeded)
            {
                snackBar.Add(result.Messages.First(), Severity.Success);
                await Refresh();
            }
            else
            {
                snackBar.Add(result.Messages.First(), Severity.Error);
            }
        }
        else
        {
            var request = new PoliticalPartyUpdateRequest
                {
                    Id = politicalParty.Id,
                    Name = politicalParty.Name,
                    Manifesto = politicalParty.Slogan,
                    Slogan = politicalParty.Slogan,
                    LogoUrl = politicalParty.LogoUrl
                };
            var result = await electionService.UpdatePoliticalParty(request);
            if (result.Succeeded)
            {
                snackBar.Add(result.Messages.First(), Severity.Success);
                await Refresh();
            }
            else
            {
                snackBar.Add(result.Messages.First(), Severity.Error);
            }

        }
    }
    private void Edit(PoliticalParty politicalParty)
    {
        this.politicalParty = politicalParty;
        isEditing = true;
        StateHasChanged();
    }
    MudMessageBox mbox;
    private async Task Delete(Guid id)
    {
        bool? confirmed = await mbox.Show();
        if (confirmed == true)
        {
            var result = await electionService.DeletePoliticalParty(id.ToString());
            if (result.Succeeded)
            {
                snackBar.Add(result.Messages.First(), Severity.Success);
                await Refresh();
            }
            else
            {
                snackBar.Add(result.Messages.First(), Severity.Error);
            }
        }
    }
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        if (e.File.Size > 5000000)
        {
            snackBar.Add("Allowed file size is 5mbs", Severity.Error);
            return;
        }
        //TODO upload the files to the server
        var ms = new MemoryStream();
        var stream = e.File.OpenReadStream(5000000);
        await stream.CopyToAsync(ms);
        var request = new UploadRequest
            {
                Data = ms.GetBuffer(),
                FileName = e.File.Name,
                Type = UploadType.ProfilePicture
            };
        var rs = await fileService.UploadFile(request);
        if(rs.Succeeded)
        {
            politicalParty.LogoUrl = rs.Data;
            snackBar.Add("Upload Successiful.", Severity.Success);
            return;
        }
        else
        {
            snackBar.Add("We couldn't upload your image. try again", Severity.Error);
            return;
        }

    }
}