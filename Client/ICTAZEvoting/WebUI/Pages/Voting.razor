@layout BallotLayout
@page "/voting"
@page "/voting/{electionId}"

@using ICTAZEVoting.Shared
@using System.Linq
@using System
@using ICTAZEVoting.Shared.Models
@using ICTAZEVoting.Shared.Responses.Domain
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime

<MudGrid>
    <MudItem xs="12">
        <h1>Ballot</h1>
    </MudItem>
    <MudItem xs="12">
        <MudTabs @ref="tabs" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            @foreach (var position in election.Positions)
            {
                <MudTabPanel Disabled="@(position!=election.Positions.First())" Text="@position.Position.ToUpper()">
                    <MudGrid>
                        @foreach (var candidate in candidates.Where(c => c.ElectionPositionId == position.Id))
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <Animate Animation="Animations.FadeDownRight" Duration="TimeSpan.FromSeconds(1)">
                                    <div @onclick="()=>{candidate.IsSelected=CandidateClicked(candidate,position); StateHasChanged();}" class='@(candidate.IsSelected?"selected":"")'>
                                        <MudCard Elevation="25" Outlined="true">
                                            <MudCardHeader>
                                                <CardHeaderAvatar>
                                                    <MudAvatar Color="Color.Secondary">@candidate.PersonalDetails.FirstName.First() @candidate.PersonalDetails.LastName.First() </MudAvatar>
                                                </CardHeaderAvatar>
                                                <CardHeaderContent>
                                                    <MudText Typo="Typo.body1">@candidate.PersonalDetails.FullName</MudText>
                                                    <MudText Typo="Typo.body2">@candidate.PoliticalParty.Name</MudText>
                                                </CardHeaderContent>
                                            </MudCardHeader>
                                            <MudCardMedia Image="@(fileService.GetFileUrl(candidate.PersonalDetails.PictureUrl))" Height="300" />
                                            <MudCardContent>
                                                <MudText Typo="Typo.body2">@candidate.PoliticalParty.Slogan</MudText>
                                            </MudCardContent>
                                        </MudCard>
                                    </div>
                                </Animate>
                            </MudItem>
                        }
                    </MudGrid>
                </MudTabPanel>
            }

            <MudToolBar Class="align-items: center;">
                <MudButton Class="align-items: center;" Disabled="@_processing" OnClick="ProcessSomething" Variant="Variant.Filled" Color="Color.Success">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Color="Color.Secondary" Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>NEXT</MudText>
                    }
                </MudButton>
            </MudToolBar>
        </MudTabs>
    </MudItem>
</MudGrid>

<style>
    .selected {
        border-width: 6px;
        border-style: solid;
        border-color: lawngreen;
    }
</style>



@code {

    [Parameter] public string ElectionId { get; set; }
    private List<CandidateResponse> candidates = new List<CandidateResponse>();
    ElectionResponse election = new();
    MudTabs tabs;    
    Ballot ballot = new();
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }
    async Task Refresh()
    {
        ballot.Votes = new();
        election.Positions = new();
        election = await electionService.GetElection(ElectionId);
        candidates = await electionService.GetCandidates(ElectionId);
        StateHasChanged();

    }

    private bool _processing = false;
    bool CandidateClicked(CandidateResponse candidate, ElectionPositionResponse  position)
    {   
        if(ballot.Votes.Any(v=>v.CandidateId==candidate.Id && v.PositionId==position.Id))
        {
            return false;
        }
        else
        {
            candidates.Where(c => c.ElectionPositionId == position.Id).ToList().ForEach(c=>c.IsSelected=false);
            StateHasChanged();
            return true;
        }

    }
    async Task ProcessSomething()
    {
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
    }



}
