@page "/elections"

@using ICTAZEVoting.Shared
@using System.Linq
@using System
@using ICTAZEVoting.Shared.Models
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Elections</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <EditForm OnValidSubmit="Save" OnInvalidSubmit='()=>snackBar.Add("Provide a name",Severity.Warning)' Model="@election">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                        <MudTextField For="()=>election.Name" @bind-Value="election.Name" Label="Description" Variant="Variant.Outlined"></MudTextField>
                    </Animate>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                        <MudDatePicker AutoClose="true" @bind-Date="dateTime" Label="Date of the Election" Placeholder="Select Date" Variant="Variant.Outlined" />
                    </Animate>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                        <MudTimePicker AutoClose="true" @bind-Time="time" Label="Starting Time" Placeholder="Choose time" Variant="Variant.Outlined" />
                    </Animate>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                        <MudNumericField T="double" Min="1" @bind-Value="election.Duration" Label="Election Duration(hours)" Variant="Variant.Outlined"></MudNumericField>
                    </Animate>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                        <MudSelect For="()=>election.ElectionTypeId" T="Guid" Variant="Variant.Outlined" Label="Election Type" @bind-Value="election.ElectionTypeId">
                            <MudSelectItem T="Guid" Value="default">No type selected</MudSelectItem>
                            @foreach (var type in electionTypes)
                            {
                                <MudSelectItem T="Guid" Value="@type.Id">@type.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </Animate>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">

                    </Animate>
                </MudItem>
                <MudDivider />
                <MudItem xs="12">
                    <center><MudText GutterBottom="true" Color="Color.Primary" Typo="Typo.h5">Election Positions</MudText></center>
                    <MudButton StartIcon="@Icons.Material.Filled.Add" Class="mb-4"Variant="Variant.Outlined" Size="Size.Small" Color="Color.Secondary">Create new position</MudButton>
                    <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
                        <MudSimpleTable Dense="true" Bordered="true" Hover="true" FixedHeader="true">
                            <thead>
                                <tr>
                                    <th>No.</th>
                                    <th>Position</th>
                                    <th>No. of Candidates</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (!election.Positions.Any())
                                {
                                    <center><MudAlert Class="m-6" Dense="true" Severity="Severity.Warning">No positions added</MudAlert></center>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </Animate>
                </MudItem>
            </MudGrid>
            <MudButton ButtonType="MudBlazor.ButtonType.Submit" Class="mt-6" Variant="Variant.Filled" Color="Color.Success">Save Election</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>

<Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(0.5)">
    <MudTable Style="color: white" Elevation="25" Items="elections">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Loans</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search for Elections..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Election Date</MudTh>
            <MudTh>Election Title</MudTh>

            <MudTh>Election Duration</MudTh>
            <MudTh>Election Status</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Election Date">@context.ElectionDate</MudTd>
            <MudTd DataLabel="">
                <MudFab @onclick="@(()=>Edit(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</Animate>

<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Filled.ArrowCircleUp" />
</MudScrollToTop>
<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>


@code {
    private string searchString = "";
    private Election election = new Election();
    private List<Election> elections = new List<Election>();
    private List<ElectionType> electionTypes = new List<ElectionType>();
    private DateTime? dateTime = DateTime.Now;
    private TimeSpan? time = new TimeSpan(0, 8, 0, 0);
    bool isEditing;
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    async Task Refresh()
    {
        election = new();
        election.Positions = new();
        isEditing = false;
        elections = await electionService.GetElectionList();
        electionTypes = await electionService.GetElectionTypes();
        StateHasChanged();
    }

    async Task Save()
    {
        if (!isEditing)
        {
            //adding
            var result = await electionService.AddElection(election);
            if (result.Succeeded)
            {
                snackBar.Add(result.Messages.First(), Severity.Success);
                await Refresh();
            }
            else
            {
                snackBar.Add(result.Messages.First(), Severity.Error);
            }
        }
        else
        {
            var result = await electionService.UpdateElection(election);
            if (result.Succeeded)
            {
                snackBar.Add(result.Messages.First(), Severity.Success);
                await Refresh();
            }
            else
            {
                snackBar.Add(result.Messages.First(), Severity.Error);
            }

        }
    }
    private void Edit(Election election)
    {
        this.election = election;
        isEditing = true;
        StateHasChanged();
    }

    MudMessageBox mbox { get; set; }
    private async Task Delete(Guid id)
    {
        bool? confirmed = await mbox.Show();
        if (confirmed == true)
        {
            var result = await electionService.DeleteElection(id.ToString());
            if (result.Succeeded)
            {
                snackBar.Add(result.Messages.First(), Severity.Success);
                await Refresh();
            }
            else
            {
                snackBar.Add(result.Messages.First(), Severity.Error);
            }
        }
    }


    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        //TODO upload the files to the server
    }
}
